{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7f972f34",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-29T18:31:41.809150Z",
     "iopub.status.busy": "2024-07-29T18:31:41.808862Z",
     "iopub.status.idle": "2024-07-29T18:31:48.077572Z",
     "shell.execute_reply": "2024-07-29T18:31:48.076575Z"
    },
    "papermill": {
     "duration": 6.284497,
     "end_time": "2024-07-29T18:31:48.079747",
     "exception": false,
     "start_time": "2024-07-29T18:31:41.795250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e7/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e7/train.csv\n",
      "/kaggle/input/playground-series-s4e7/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torch import nn\n",
    "import imblearn\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0734f81a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:31:48.105512Z",
     "iopub.status.busy": "2024-07-29T18:31:48.105055Z",
     "iopub.status.idle": "2024-07-29T18:31:48.109789Z",
     "shell.execute_reply": "2024-07-29T18:31:48.108941Z"
    },
    "papermill": {
     "duration": 0.020252,
     "end_time": "2024-07-29T18:31:48.112071",
     "exception": false,
     "start_time": "2024-07-29T18:31:48.091819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda\n"
     ]
    }
   ],
   "source": [
    "device = \"cuda\" if torch.cuda.is_available else \"cpu\"\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9ea438cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:31:48.136811Z",
     "iopub.status.busy": "2024-07-29T18:31:48.136540Z",
     "iopub.status.idle": "2024-07-29T18:32:21.090375Z",
     "shell.execute_reply": "2024-07-29T18:32:21.089563Z"
    },
    "papermill": {
     "duration": 32.968607,
     "end_time": "2024-07-29T18:32:21.092682",
     "exception": false,
     "start_time": "2024-07-29T18:31:48.124075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train = pd.read_csv(r'/kaggle/input/playground-series-s4e7/train.csv')\n",
    "df_test = pd.read_csv(r'/kaggle/input/playground-series-s4e7/test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40d554e7",
   "metadata": {
    "papermill": {
     "duration": 0.012513,
     "end_time": "2024-07-29T18:32:21.117196",
     "exception": false,
     "start_time": "2024-07-29T18:32:21.104683",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Checkin duplicate and null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4e16086e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:21.141556Z",
     "iopub.status.busy": "2024-07-29T18:32:21.141275Z",
     "iopub.status.idle": "2024-07-29T18:32:36.696151Z",
     "shell.execute_reply": "2024-07-29T18:32:36.695220Z"
    },
    "papermill": {
     "duration": 15.569736,
     "end_time": "2024-07-29T18:32:36.698423",
     "exception": false,
     "start_time": "2024-07-29T18:32:21.128687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11504798, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.duplicated().sum()\n",
    "df_train.drop_duplicates(inplace=True)\n",
    "df_train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7c916a4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:36.723455Z",
     "iopub.status.busy": "2024-07-29T18:32:36.723133Z",
     "iopub.status.idle": "2024-07-29T18:32:47.086064Z",
     "shell.execute_reply": "2024-07-29T18:32:47.085170Z"
    },
    "papermill": {
     "duration": 10.377647,
     "end_time": "2024-07-29T18:32:47.088124",
     "exception": false,
     "start_time": "2024-07-29T18:32:36.710477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7669866, 11)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.duplicated().sum()\n",
    "df_test.drop_duplicates(inplace=True)\n",
    "df_test.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5a5cc7cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:47.122844Z",
     "iopub.status.busy": "2024-07-29T18:32:47.122035Z",
     "iopub.status.idle": "2024-07-29T18:32:50.346377Z",
     "shell.execute_reply": "2024-07-29T18:32:50.345479Z"
    },
    "papermill": {
     "duration": 3.24446,
     "end_time": "2024-07-29T18:32:50.348590",
     "exception": false,
     "start_time": "2024-07-29T18:32:47.104130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                      0\n",
       "Gender                  0\n",
       "Age                     0\n",
       "Driving_License         0\n",
       "Region_Code             0\n",
       "Previously_Insured      0\n",
       "Vehicle_Age             0\n",
       "Vehicle_Damage          0\n",
       "Annual_Premium          0\n",
       "Policy_Sales_Channel    0\n",
       "Vintage                 0\n",
       "Response                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values = df_train.isnull().sum()\n",
    "missing_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "36615852",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:50.373938Z",
     "iopub.status.busy": "2024-07-29T18:32:50.373675Z",
     "iopub.status.idle": "2024-07-29T18:32:52.522107Z",
     "shell.execute_reply": "2024-07-29T18:32:52.521229Z"
    },
    "papermill": {
     "duration": 2.163505,
     "end_time": "2024-07-29T18:32:52.524337",
     "exception": false,
     "start_time": "2024-07-29T18:32:50.360832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                      0\n",
       "Gender                  0\n",
       "Age                     0\n",
       "Driving_License         0\n",
       "Region_Code             0\n",
       "Previously_Insured      0\n",
       "Vehicle_Age             0\n",
       "Vehicle_Damage          0\n",
       "Annual_Premium          0\n",
       "Policy_Sales_Channel    0\n",
       "Vintage                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values = df_test.isnull().sum()\n",
    "missing_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0b2f0a6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:52.551451Z",
     "iopub.status.busy": "2024-07-29T18:32:52.551128Z",
     "iopub.status.idle": "2024-07-29T18:32:52.814167Z",
     "shell.execute_reply": "2024-07-29T18:32:52.812866Z"
    },
    "papermill": {
     "duration": 0.28012,
     "end_time": "2024-07-29T18:32:52.817804",
     "exception": false,
     "start_time": "2024-07-29T18:32:52.537684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Checking Imbalance in Training Data Or Response')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 600x600 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Checking If training data is Imbalanced\n",
    "response_data = df_train['Response'].value_counts()\n",
    "plt.figure(figsize=(6,6))\n",
    "fig, ax = plt.subplots()\n",
    "ax.pie(response_data, labels = [0,1])\n",
    "ax.set_title('Checking Imbalance in Training Data Or Response')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6b975802",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:52.873857Z",
     "iopub.status.busy": "2024-07-29T18:32:52.873404Z",
     "iopub.status.idle": "2024-07-29T18:32:52.879949Z",
     "shell.execute_reply": "2024-07-29T18:32:52.878656Z"
    },
    "papermill": {
     "duration": 0.037598,
     "end_time": "2024-07-29T18:32:52.882893",
     "exception": false,
     "start_time": "2024-07-29T18:32:52.845295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def veh(vehicle_dam):\n",
    "    if vehicle_dam == 'Yes':\n",
    "        return 1\n",
    "    \n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "db586358",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:32:52.912489Z",
     "iopub.status.busy": "2024-07-29T18:32:52.912237Z",
     "iopub.status.idle": "2024-07-29T18:33:01.217423Z",
     "shell.execute_reply": "2024-07-29T18:33:01.216500Z"
    },
    "papermill": {
     "duration": 8.321023,
     "end_time": "2024-07-29T18:33:01.219862",
     "exception": false,
     "start_time": "2024-07-29T18:32:52.898839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train['Vehicle_Damages'] = df_train['Vehicle_Damage'].apply(veh)\n",
    "df_train.drop(['Vehicle_Damage'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "08925d24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:01.246801Z",
     "iopub.status.busy": "2024-07-29T18:33:01.246499Z",
     "iopub.status.idle": "2024-07-29T18:33:06.759550Z",
     "shell.execute_reply": "2024-07-29T18:33:06.758524Z"
    },
    "papermill": {
     "duration": 5.529319,
     "end_time": "2024-07-29T18:33:06.762361",
     "exception": false,
     "start_time": "2024-07-29T18:33:01.233042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_test['Vehicle_Damages'] = df_test['Vehicle_Damage'].apply(veh)\n",
    "df_test.drop(['Vehicle_Damage'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d650e1ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:06.789793Z",
     "iopub.status.busy": "2024-07-29T18:33:06.789504Z",
     "iopub.status.idle": "2024-07-29T18:33:09.505102Z",
     "shell.execute_reply": "2024-07-29T18:33:09.504227Z"
    },
    "papermill": {
     "duration": 2.73152,
     "end_time": "2024-07-29T18:33:09.507249",
     "exception": false,
     "start_time": "2024-07-29T18:33:06.775729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "      <th>Vehicle_Damages</th>\n",
       "      <th>Vehicle_Age_1-2 Year</th>\n",
       "      <th>Vehicle_Age_&lt; 1 Year</th>\n",
       "      <th>Vehicle_Age_&gt; 2 Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "0   0    Male   21                1         35.0                   0   \n",
       "1   1    Male   43                1         28.0                   0   \n",
       "2   2  Female   25                1         14.0                   1   \n",
       "3   3  Female   35                1          1.0                   0   \n",
       "4   4  Female   36                1         15.0                   1   \n",
       "\n",
       "   Annual_Premium  Policy_Sales_Channel  Vintage  Response  Vehicle_Damages  \\\n",
       "0         65101.0                 124.0      187         0                1   \n",
       "1         58911.0                  26.0      288         1                1   \n",
       "2         38043.0                 152.0      254         0                0   \n",
       "3          2630.0                 156.0       76         0                1   \n",
       "4         31951.0                 152.0      294         0                0   \n",
       "\n",
       "   Vehicle_Age_1-2 Year  Vehicle_Age_< 1 Year  Vehicle_Age_> 2 Years  \n",
       "0                  True                 False                  False  \n",
       "1                 False                 False                   True  \n",
       "2                 False                  True                  False  \n",
       "3                  True                 False                  False  \n",
       "4                  True                 False                  False  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['Vehicle_Age'] = df_train['Vehicle_Age'].astype('category')\n",
    "df_train = pd.get_dummies(df_train, columns=['Vehicle_Age'])\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "01361dce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:09.534965Z",
     "iopub.status.busy": "2024-07-29T18:33:09.534293Z",
     "iopub.status.idle": "2024-07-29T18:33:11.260051Z",
     "shell.execute_reply": "2024-07-29T18:33:11.259084Z"
    },
    "papermill": {
     "duration": 1.741768,
     "end_time": "2024-07-29T18:33:11.262304",
     "exception": false,
     "start_time": "2024-07-29T18:33:09.520536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Vehicle_Damages</th>\n",
       "      <th>Vehicle_Age_1-2 Year</th>\n",
       "      <th>Vehicle_Age_&lt; 1 Year</th>\n",
       "      <th>Vehicle_Age_&gt; 2 Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11504798</td>\n",
       "      <td>Female</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>228</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11504799</td>\n",
       "      <td>Male</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>37483.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>123</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11504800</td>\n",
       "      <td>Male</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>271</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11504801</td>\n",
       "      <td>Female</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>24502.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11504802</td>\n",
       "      <td>Male</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34115.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>148</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "0  11504798  Female   20                1         47.0                   0   \n",
       "1  11504799    Male   47                1         28.0                   0   \n",
       "2  11504800    Male   47                1         43.0                   0   \n",
       "3  11504801  Female   22                1         47.0                   1   \n",
       "4  11504802    Male   51                1         19.0                   0   \n",
       "\n",
       "   Annual_Premium  Policy_Sales_Channel  Vintage  Vehicle_Damages  \\\n",
       "0          2630.0                 160.0      228                0   \n",
       "1         37483.0                 124.0      123                1   \n",
       "2          2630.0                  26.0      271                1   \n",
       "3         24502.0                 152.0      115                0   \n",
       "4         34115.0                 124.0      148                0   \n",
       "\n",
       "   Vehicle_Age_1-2 Year  Vehicle_Age_< 1 Year  Vehicle_Age_> 2 Years  \n",
       "0                 False                  True                  False  \n",
       "1                  True                 False                  False  \n",
       "2                  True                 False                  False  \n",
       "3                 False                  True                  False  \n",
       "4                  True                 False                  False  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test['Vehicle_Age'] = df_test['Vehicle_Age'].astype('category')\n",
    "df_test = pd.get_dummies(df_test, columns=['Vehicle_Age'])\n",
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c0987880",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:11.290386Z",
     "iopub.status.busy": "2024-07-29T18:33:11.289866Z",
     "iopub.status.idle": "2024-07-29T18:33:14.379219Z",
     "shell.execute_reply": "2024-07-29T18:33:14.378090Z"
    },
    "papermill": {
     "duration": 3.105986,
     "end_time": "2024-07-29T18:33:14.381776",
     "exception": false,
     "start_time": "2024-07-29T18:33:11.275790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_test['Gender'] = df_test['Gender'].astype('category')\n",
    "df_test = pd.get_dummies(df_test, columns=['Gender'],drop_first=True)\n",
    "\n",
    "df_train['Gender'] = df_train['Gender'].astype('category')\n",
    "df_train = pd.get_dummies(df_train, columns=['Gender'],drop_first=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3210eec",
   "metadata": {
    "papermill": {
     "duration": 0.014209,
     "end_time": "2024-07-29T18:33:14.411211",
     "exception": false,
     "start_time": "2024-07-29T18:33:14.397002",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATASET CREATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c0cbdc97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:14.442145Z",
     "iopub.status.busy": "2024-07-29T18:33:14.441828Z",
     "iopub.status.idle": "2024-07-29T18:33:14.728936Z",
     "shell.execute_reply": "2024-07-29T18:33:14.728161Z"
    },
    "papermill": {
     "duration": 0.305286,
     "end_time": "2024-07-29T18:33:14.731320",
     "exception": false,
     "start_time": "2024-07-29T18:33:14.426034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = df_train[['Age', 'Driving_License', 'Region_Code', 'Previously_Insured', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage', 'Vehicle_Damages', 'Vehicle_Age_1-2 Year','Vehicle_Age_< 1 Year', 'Vehicle_Age_> 2 Years', 'Gender_Male']]\n",
    "y_train = df_train['Response']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2d259bec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:14.759163Z",
     "iopub.status.busy": "2024-07-29T18:33:14.758873Z",
     "iopub.status.idle": "2024-07-29T18:33:14.994147Z",
     "shell.execute_reply": "2024-07-29T18:33:14.992775Z"
    },
    "papermill": {
     "duration": 0.251845,
     "end_time": "2024-07-29T18:33:14.996629",
     "exception": false,
     "start_time": "2024-07-29T18:33:14.744784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/652453293.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_train['Vehicle_Age_1-2 Year'] = X_train['Vehicle_Age_1-2 Year'].astype(int)\n",
      "/tmp/ipykernel_24/652453293.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_train['Vehicle_Age_< 1 Year'] = X_train['Vehicle_Age_< 1 Year'].astype(int)\n",
      "/tmp/ipykernel_24/652453293.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_train['Vehicle_Age_> 2 Years'] = X_train['Vehicle_Age_> 2 Years'].astype(int)\n",
      "/tmp/ipykernel_24/652453293.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_train['Gender_Male'] = X_train['Gender_Male'].astype(int)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Vehicle_Damages</th>\n",
       "      <th>Vehicle_Age_1-2 Year</th>\n",
       "      <th>Vehicle_Age_&lt; 1 Year</th>\n",
       "      <th>Vehicle_Age_&gt; 2 Years</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Driving_License  Region_Code  Previously_Insured  Annual_Premium  \\\n",
       "0   21                1         35.0                   0         65101.0   \n",
       "1   43                1         28.0                   0         58911.0   \n",
       "2   25                1         14.0                   1         38043.0   \n",
       "3   35                1          1.0                   0          2630.0   \n",
       "4   36                1         15.0                   1         31951.0   \n",
       "\n",
       "   Policy_Sales_Channel  Vintage  Vehicle_Damages  Vehicle_Age_1-2 Year  \\\n",
       "0                 124.0      187                1                     1   \n",
       "1                  26.0      288                1                     0   \n",
       "2                 152.0      254                0                     0   \n",
       "3                 156.0       76                1                     1   \n",
       "4                 152.0      294                0                     1   \n",
       "\n",
       "   Vehicle_Age_< 1 Year  Vehicle_Age_> 2 Years  Gender_Male  \n",
       "0                     0                      0            1  \n",
       "1                     0                      1            1  \n",
       "2                     1                      0            0  \n",
       "3                     0                      0            0  \n",
       "4                     0                      0            0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert boolean columns to integers in TRAINING DATA\n",
    "X_train['Vehicle_Age_1-2 Year'] = X_train['Vehicle_Age_1-2 Year'].astype(int)\n",
    "X_train['Vehicle_Age_< 1 Year'] = X_train['Vehicle_Age_< 1 Year'].astype(int)\n",
    "X_train['Vehicle_Age_> 2 Years'] = X_train['Vehicle_Age_> 2 Years'].astype(int)\n",
    "X_train['Gender_Male'] = X_train['Gender_Male'].astype(int)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d42694a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:15.025305Z",
     "iopub.status.busy": "2024-07-29T18:33:15.024997Z",
     "iopub.status.idle": "2024-07-29T18:33:15.214273Z",
     "shell.execute_reply": "2024-07-29T18:33:15.213334Z"
    },
    "papermill": {
     "duration": 0.20584,
     "end_time": "2024-07-29T18:33:15.216269",
     "exception": false,
     "start_time": "2024-07-29T18:33:15.010429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7669866, 12)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test = df_test[['Age', 'Driving_License', 'Region_Code', 'Previously_Insured', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage', 'Vehicle_Damages', 'Vehicle_Age_1-2 Year','Vehicle_Age_< 1 Year', 'Vehicle_Age_> 2 Years', 'Gender_Male']]\n",
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "14ec9615",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:15.245484Z",
     "iopub.status.busy": "2024-07-29T18:33:15.244948Z",
     "iopub.status.idle": "2024-07-29T18:33:15.441368Z",
     "shell.execute_reply": "2024-07-29T18:33:15.440306Z"
    },
    "papermill": {
     "duration": 0.213378,
     "end_time": "2024-07-29T18:33:15.443759",
     "exception": false,
     "start_time": "2024-07-29T18:33:15.230381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_for_preds = df_test[['Age', 'Driving_License', 'Region_Code', 'Previously_Insured', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage', 'Vehicle_Damages', 'Vehicle_Age_1-2 Year','Vehicle_Age_< 1 Year', 'Vehicle_Age_> 2 Years', 'Gender_Male']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c39abb53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:15.473228Z",
     "iopub.status.busy": "2024-07-29T18:33:15.472937Z",
     "iopub.status.idle": "2024-07-29T18:33:15.637947Z",
     "shell.execute_reply": "2024-07-29T18:33:15.636501Z"
    },
    "papermill": {
     "duration": 0.182037,
     "end_time": "2024-07-29T18:33:15.640139",
     "exception": false,
     "start_time": "2024-07-29T18:33:15.458102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2313824659.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_for_preds['Vehicle_Age_1-2 Year'] = X_for_preds['Vehicle_Age_1-2 Year'].astype(int)\n",
      "/tmp/ipykernel_24/2313824659.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_for_preds['Vehicle_Age_< 1 Year'] = X_for_preds['Vehicle_Age_< 1 Year'].astype(int)\n",
      "/tmp/ipykernel_24/2313824659.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_for_preds['Vehicle_Age_> 2 Years'] = X_for_preds['Vehicle_Age_> 2 Years'].astype(int)\n",
      "/tmp/ipykernel_24/2313824659.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_for_preds['Gender_Male'] = X_for_preds['Gender_Male'].astype(int)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Vehicle_Damages</th>\n",
       "      <th>Vehicle_Age_1-2 Year</th>\n",
       "      <th>Vehicle_Age_&lt; 1 Year</th>\n",
       "      <th>Vehicle_Age_&gt; 2 Years</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>228</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>37483.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>123</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>271</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>24502.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34115.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>148</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Driving_License  Region_Code  Previously_Insured  Annual_Premium  \\\n",
       "0   20                1         47.0                   0          2630.0   \n",
       "1   47                1         28.0                   0         37483.0   \n",
       "2   47                1         43.0                   0          2630.0   \n",
       "3   22                1         47.0                   1         24502.0   \n",
       "4   51                1         19.0                   0         34115.0   \n",
       "\n",
       "   Policy_Sales_Channel  Vintage  Vehicle_Damages  Vehicle_Age_1-2 Year  \\\n",
       "0                 160.0      228                0                     0   \n",
       "1                 124.0      123                1                     1   \n",
       "2                  26.0      271                1                     1   \n",
       "3                 152.0      115                0                     0   \n",
       "4                 124.0      148                0                     1   \n",
       "\n",
       "   Vehicle_Age_< 1 Year  Vehicle_Age_> 2 Years  Gender_Male  \n",
       "0                     1                      0            0  \n",
       "1                     0                      0            1  \n",
       "2                     0                      0            1  \n",
       "3                     1                      0            0  \n",
       "4                     0                      0            1  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert boolean columns to integers in TRAINING DATA\n",
    "X_for_preds['Vehicle_Age_1-2 Year'] = X_for_preds['Vehicle_Age_1-2 Year'].astype(int)\n",
    "X_for_preds['Vehicle_Age_< 1 Year'] = X_for_preds['Vehicle_Age_< 1 Year'].astype(int)\n",
    "X_for_preds['Vehicle_Age_> 2 Years'] = X_for_preds['Vehicle_Age_> 2 Years'].astype(int)\n",
    "X_for_preds['Gender_Male'] = X_for_preds['Gender_Male'].astype(int)\n",
    "X_for_preds.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3090a7d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:15.669886Z",
     "iopub.status.busy": "2024-07-29T18:33:15.669617Z",
     "iopub.status.idle": "2024-07-29T18:33:15.902051Z",
     "shell.execute_reply": "2024-07-29T18:33:15.901222Z"
    },
    "papermill": {
     "duration": 0.249808,
     "end_time": "2024-07-29T18:33:15.904460",
     "exception": false,
     "start_time": "2024-07-29T18:33:15.654652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_for_preds = X_for_preds.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1539ec09",
   "metadata": {
    "papermill": {
     "duration": 0.054172,
     "end_time": "2024-07-29T18:33:15.973380",
     "exception": false,
     "start_time": "2024-07-29T18:33:15.919208",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TENSOR FOR PREDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "486664f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:16.003239Z",
     "iopub.status.busy": "2024-07-29T18:33:16.002579Z",
     "iopub.status.idle": "2024-07-29T18:33:16.172972Z",
     "shell.execute_reply": "2024-07-29T18:33:16.172021Z"
    },
    "papermill": {
     "duration": 0.187576,
     "end_time": "2024-07-29T18:33:16.175027",
     "exception": false,
     "start_time": "2024-07-29T18:33:15.987451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([7669866, 12])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_for_preds_tensor = torch.tensor(X_for_preds, dtype = torch.float32)\n",
    "X_for_preds_tensor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9acfad6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:16.205446Z",
     "iopub.status.busy": "2024-07-29T18:33:16.204820Z",
     "iopub.status.idle": "2024-07-29T18:33:16.370780Z",
     "shell.execute_reply": "2024-07-29T18:33:16.369440Z"
    },
    "papermill": {
     "duration": 0.183913,
     "end_time": "2024-07-29T18:33:16.373550",
     "exception": false,
     "start_time": "2024-07-29T18:33:16.189637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/3387154724.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_test['Vehicle_Age_1-2 Year'] = X_test['Vehicle_Age_1-2 Year'].astype(int)\n",
      "/tmp/ipykernel_24/3387154724.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_test['Vehicle_Age_< 1 Year'] = X_test['Vehicle_Age_< 1 Year'].astype(int)\n",
      "/tmp/ipykernel_24/3387154724.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_test['Vehicle_Age_> 2 Years'] = X_test['Vehicle_Age_> 2 Years'].astype(int)\n",
      "/tmp/ipykernel_24/3387154724.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_test['Gender_Male'] = X_test['Gender_Male'].astype(int)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Vehicle_Damages</th>\n",
       "      <th>Vehicle_Age_1-2 Year</th>\n",
       "      <th>Vehicle_Age_&lt; 1 Year</th>\n",
       "      <th>Vehicle_Age_&gt; 2 Years</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>228</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>37483.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>123</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>271</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>24502.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34115.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>148</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Driving_License  Region_Code  Previously_Insured  Annual_Premium  \\\n",
       "0   20                1         47.0                   0          2630.0   \n",
       "1   47                1         28.0                   0         37483.0   \n",
       "2   47                1         43.0                   0          2630.0   \n",
       "3   22                1         47.0                   1         24502.0   \n",
       "4   51                1         19.0                   0         34115.0   \n",
       "\n",
       "   Policy_Sales_Channel  Vintage  Vehicle_Damages  Vehicle_Age_1-2 Year  \\\n",
       "0                 160.0      228                0                     0   \n",
       "1                 124.0      123                1                     1   \n",
       "2                  26.0      271                1                     1   \n",
       "3                 152.0      115                0                     0   \n",
       "4                 124.0      148                0                     1   \n",
       "\n",
       "   Vehicle_Age_< 1 Year  Vehicle_Age_> 2 Years  Gender_Male  \n",
       "0                     1                      0            0  \n",
       "1                     0                      0            1  \n",
       "2                     0                      0            1  \n",
       "3                     1                      0            0  \n",
       "4                     0                      0            1  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert boolean columns to integers in TRAINING DATA\n",
    "X_test['Vehicle_Age_1-2 Year'] = X_test['Vehicle_Age_1-2 Year'].astype(int)\n",
    "X_test['Vehicle_Age_< 1 Year'] = X_test['Vehicle_Age_< 1 Year'].astype(int)\n",
    "X_test['Vehicle_Age_> 2 Years'] = X_test['Vehicle_Age_> 2 Years'].astype(int)\n",
    "X_test['Gender_Male'] = X_test['Gender_Male'].astype(int)\n",
    "X_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7d751f50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:33:16.404245Z",
     "iopub.status.busy": "2024-07-29T18:33:16.403964Z",
     "iopub.status.idle": "2024-07-29T18:34:53.272065Z",
     "shell.execute_reply": "2024-07-29T18:34:53.270819Z"
    },
    "papermill": {
     "duration": 96.90034,
     "end_time": "2024-07-29T18:34:53.288758",
     "exception": false,
     "start_time": "2024-07-29T18:33:16.388418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Response\n",
      "0    10089739\n",
      "1     1415059\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Response\n",
      "0    10089739\n",
      "1    10089739\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "smote = SMOTE()\n",
    "X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n",
    "print(y_train.value_counts())\n",
    "print()\n",
    "print(y_train_smote.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28893dd7",
   "metadata": {
    "papermill": {
     "duration": 0.015253,
     "end_time": "2024-07-29T18:34:53.318742",
     "exception": false,
     "start_time": "2024-07-29T18:34:53.303489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Scalling Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d8730f37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:34:53.349523Z",
     "iopub.status.busy": "2024-07-29T18:34:53.349140Z",
     "iopub.status.idle": "2024-07-29T18:34:53.353299Z",
     "shell.execute_reply": "2024-07-29T18:34:53.352452Z"
    },
    "papermill": {
     "duration": 0.021726,
     "end_time": "2024-07-29T18:34:53.355152",
     "exception": false,
     "start_time": "2024-07-29T18:34:53.333426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a1656170",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:34:53.385568Z",
     "iopub.status.busy": "2024-07-29T18:34:53.385297Z",
     "iopub.status.idle": "2024-07-29T18:34:58.156782Z",
     "shell.execute_reply": "2024-07-29T18:34:58.155770Z"
    },
    "papermill": {
     "duration": 4.789391,
     "end_time": "2024-07-29T18:34:58.159316",
     "exception": false,
     "start_time": "2024-07-29T18:34:53.369925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "X_train_scaled = scaler.fit_transform(X_train_smote)\n",
    "X_for_preds_tensor = scaler.transform(X_for_preds_tensor)\n",
    "X_for_preds_tensor = torch.tensor(X_for_preds_tensor, dtype = torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5fabb834",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:34:58.191682Z",
     "iopub.status.busy": "2024-07-29T18:34:58.191366Z",
     "iopub.status.idle": "2024-07-29T18:35:03.006524Z",
     "shell.execute_reply": "2024-07-29T18:35:03.005739Z"
    },
    "papermill": {
     "duration": 4.833201,
     "end_time": "2024-07-29T18:35:03.008809",
     "exception": false,
     "start_time": "2024-07-29T18:34:58.175608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_train_scaled, y_train_smote, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8b4f20d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:03.040229Z",
     "iopub.status.busy": "2024-07-29T18:35:03.039919Z",
     "iopub.status.idle": "2024-07-29T18:35:03.044943Z",
     "shell.execute_reply": "2024-07-29T18:35:03.043912Z"
    },
    "papermill": {
     "duration": 0.022813,
     "end_time": "2024-07-29T18:35:03.046900",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.024087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14125634, 12) (14125634,) (6053844, 12) (6053844,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c671e713",
   "metadata": {
    "papermill": {
     "duration": 0.014506,
     "end_time": "2024-07-29T18:35:03.076308",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.061802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATA to TENSOR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d718b984",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:03.107173Z",
     "iopub.status.busy": "2024-07-29T18:35:03.106885Z",
     "iopub.status.idle": "2024-07-29T18:35:03.111453Z",
     "shell.execute_reply": "2024-07-29T18:35:03.110578Z"
    },
    "papermill": {
     "duration": 0.02223,
     "end_time": "2024-07-29T18:35:03.113281",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.091051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_train = y_train.to_numpy()\n",
    "y_test = y_test.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8d5ca242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:03.143901Z",
     "iopub.status.busy": "2024-07-29T18:35:03.143660Z",
     "iopub.status.idle": "2024-07-29T18:35:03.548843Z",
     "shell.execute_reply": "2024-07-29T18:35:03.547982Z"
    },
    "papermill": {
     "duration": 0.423333,
     "end_time": "2024-07-29T18:35:03.551254",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.127921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train_tensor = torch.tensor(X_train, dtype = torch.float32)\n",
    "y_train_tensor = torch.tensor(y_train, dtype = torch.float32)\n",
    "X_test_tensor = torch.tensor(X_test, dtype = torch.float32)\n",
    "y_test_tensor = torch.tensor(y_test, dtype = torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fd79064a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:03.584602Z",
     "iopub.status.busy": "2024-07-29T18:35:03.584251Z",
     "iopub.status.idle": "2024-07-29T18:35:03.590622Z",
     "shell.execute_reply": "2024-07-29T18:35:03.589790Z"
    },
    "papermill": {
     "duration": 0.024602,
     "end_time": "2024-07-29T18:35:03.592681",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.568079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Custom dataset class\n",
    "class CustomDataset(Dataset):\n",
    "    def __init__(self, X, y=None):\n",
    "        self.X = X\n",
    "        self.y = y\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.X)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        \n",
    "        try:\n",
    "            if self.y is not None:\n",
    "                return self.X[idx], self.y[idx]\n",
    "            else:\n",
    "                return self.X[idx]\n",
    "        except Exception as e:\n",
    "            print(f\"Exception in __getitem__: {e}\")\n",
    "            raise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6b833765",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:03.623650Z",
     "iopub.status.busy": "2024-07-29T18:35:03.623130Z",
     "iopub.status.idle": "2024-07-29T18:35:03.628756Z",
     "shell.execute_reply": "2024-07-29T18:35:03.627862Z"
    },
    "papermill": {
     "duration": 0.023223,
     "end_time": "2024-07-29T18:35:03.630731",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.607508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = CustomDataset(X_train_tensor, y_train_tensor)\n",
    "test_dataset = CustomDataset(X_test_tensor, y_test_tensor)\n",
    "\n",
    "# Create DataLoaders\n",
    "# train_loader = DataLoader(train_dataset, batch_size=64,shuffle=True,pin_memory=True)\n",
    "# test_loader = DataLoader(test_dataset, batch_size=64,shuffle=False, pin_memory=True)\n",
    "train_loader = DataLoader(train_dataset, batch_size=640,shuffle=True,num_workers=3, pin_memory=True, persistent_workers=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=640,shuffle=False,num_workers=3, pin_memory=True, persistent_workers=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6522661c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:03.662650Z",
     "iopub.status.busy": "2024-07-29T18:35:03.661772Z",
     "iopub.status.idle": "2024-07-29T18:35:04.756733Z",
     "shell.execute_reply": "2024-07-29T18:35:04.755573Z"
    },
    "papermill": {
     "duration": 1.113345,
     "end_time": "2024-07-29T18:35:04.759037",
     "exception": false,
     "start_time": "2024-07-29T18:35:03.645692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mon Jul 29 18:35:04 2024       \r\n",
      "+-----------------------------------------------------------------------------------------+\r\n",
      "| NVIDIA-SMI 550.90.07              Driver Version: 550.90.07      CUDA Version: 12.4     |\r\n",
      "|-----------------------------------------+------------------------+----------------------+\r\n",
      "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\r\n",
      "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\r\n",
      "|                                         |                        |               MIG M. |\r\n",
      "|=========================================+========================+======================|\r\n",
      "|   0  Tesla P100-PCIE-16GB           Off |   00000000:00:04.0 Off |                    0 |\r\n",
      "| N/A   38C    P0             26W /  250W |       0MiB /  16384MiB |      0%      Default |\r\n",
      "|                                         |                        |                  N/A |\r\n",
      "+-----------------------------------------+------------------------+----------------------+\r\n",
      "                                                                                         \r\n",
      "+-----------------------------------------------------------------------------------------+\r\n",
      "| Processes:                                                                              |\r\n",
      "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\r\n",
      "|        ID   ID                                                               Usage      |\r\n",
      "|=========================================================================================|\r\n",
      "|  No running processes found                                                             |\r\n",
      "+-----------------------------------------------------------------------------------------+\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4fb4b396",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:04.791149Z",
     "iopub.status.busy": "2024-07-29T18:35:04.790571Z",
     "iopub.status.idle": "2024-07-29T18:35:04.798383Z",
     "shell.execute_reply": "2024-07-29T18:35:04.797492Z"
    },
    "papermill": {
     "duration": 0.025771,
     "end_time": "2024-07-29T18:35:04.800234",
     "exception": false,
     "start_time": "2024-07-29T18:35:04.774463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Model\n",
    "class ModelV1(nn.Module):\n",
    "    def __init__(self,\n",
    "                 input_shape: int,\n",
    "                 hidden_units: int,\n",
    "                 output_shapes: int):\n",
    "        super().__init__()\n",
    "\n",
    "        self.layer_stack = nn.Sequential(\n",
    "            nn.Linear(in_features=input_shape, out_features=hidden_units),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(in_features=hidden_units, out_features=output_shapes)\n",
    "        )\n",
    "\n",
    "    def forward(self, x: torch.Tensor):\n",
    "        return self.layer_stack(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9e27142e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:04.831706Z",
     "iopub.status.busy": "2024-07-29T18:35:04.831399Z",
     "iopub.status.idle": "2024-07-29T18:35:06.161990Z",
     "shell.execute_reply": "2024-07-29T18:35:06.161168Z"
    },
    "papermill": {
     "duration": 1.349077,
     "end_time": "2024-07-29T18:35:06.164370",
     "exception": false,
     "start_time": "2024-07-29T18:35:04.815293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_1 = ModelV1(input_shape=12,\n",
    "                  hidden_units=64,\n",
    "                  output_shapes=1).to(device)\n",
    "\n",
    "\n",
    "loss_fn = nn.BCEWithLogitsLoss()\n",
    "\n",
    "optimizer = torch.optim.SGD(params=model_1.parameters(),\n",
    "                            lr=0.001)\n",
    "# optimizer = torch.optim.SGD(params=model_1.parameters(),\n",
    "#                             lr=0.001)\n",
    "\n",
    "def accuracy_fn(y_true, y_pred):\n",
    "    correct = torch.eq(y_true, y_pred).sum().item()\n",
    "    acc = (correct/len(y_pred))*100\n",
    "    return acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "47b41e4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T18:35:06.197082Z",
     "iopub.status.busy": "2024-07-29T18:35:06.196694Z",
     "iopub.status.idle": "2024-07-29T20:10:05.810065Z",
     "shell.execute_reply": "2024-07-29T20:10:05.808881Z"
    },
    "papermill": {
     "duration": 5699.675222,
     "end_time": "2024-07-29T20:10:05.855542",
     "exception": false,
     "start_time": "2024-07-29T18:35:06.180320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "Epoch: 0\n",
      "Looked at: 0/14125634 samples. | Loss: 0.69348 | Acc: 50.62%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.68945 | Acc: 56.88%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.67986 | Acc: 76.72%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.65680 | Acc: 77.50%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.58408 | Acc: 77.50%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.48203 | Acc: 76.88%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.41614 | Acc: 80.62%\n",
      "\n",
      "Average Train Loss in Epoch 0: 0.5809\n",
      "\n",
      "Average Test Loss in Epoch 0: 0.4074 | Test Accuracy: 79.99%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 1\n",
      "Looked at: 0/14125634 samples. | Loss: 0.41620 | Acc: 77.97%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.41592 | Acc: 80.00%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.42081 | Acc: 78.28%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35847 | Acc: 84.22%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35110 | Acc: 83.28%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38692 | Acc: 80.00%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.38381 | Acc: 81.09%\n",
      "\n",
      "Average Train Loss in Epoch 1: 0.3874\n",
      "\n",
      "Average Test Loss in Epoch 1: 0.3776 | Test Accuracy: 80.86%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 2\n",
      "Looked at: 0/14125634 samples. | Loss: 0.35614 | Acc: 82.03%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.39939 | Acc: 79.06%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.38147 | Acc: 79.22%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35861 | Acc: 82.50%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37041 | Acc: 83.91%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38451 | Acc: 81.41%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37272 | Acc: 80.62%\n",
      "\n",
      "Average Train Loss in Epoch 2: 0.3750\n",
      "\n",
      "Average Test Loss in Epoch 2: 0.3728 | Test Accuracy: 81.04%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 3\n",
      "Looked at: 0/14125634 samples. | Loss: 0.38510 | Acc: 80.47%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36291 | Acc: 82.34%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35812 | Acc: 82.81%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36721 | Acc: 79.22%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.36700 | Acc: 79.84%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38237 | Acc: 81.09%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.35359 | Acc: 81.56%\n",
      "\n",
      "Average Train Loss in Epoch 3: 0.3720\n",
      "\n",
      "Average Test Loss in Epoch 3: 0.3711 | Test Accuracy: 81.14%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 4\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37351 | Acc: 81.72%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36605 | Acc: 82.81%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.38514 | Acc: 80.31%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.39995 | Acc: 78.75%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35363 | Acc: 82.19%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37712 | Acc: 80.62%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.38605 | Acc: 78.91%\n",
      "\n",
      "Average Train Loss in Epoch 4: 0.3709\n",
      "\n",
      "Average Test Loss in Epoch 4: 0.3703 | Test Accuracy: 81.19%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 5\n",
      "Looked at: 0/14125634 samples. | Loss: 0.38632 | Acc: 79.22%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37835 | Acc: 80.94%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36418 | Acc: 82.50%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.37985 | Acc: 81.25%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.34836 | Acc: 81.41%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.34812 | Acc: 82.97%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.38529 | Acc: 79.06%\n",
      "\n",
      "Average Train Loss in Epoch 5: 0.3702\n",
      "\n",
      "Average Test Loss in Epoch 5: 0.3697 | Test Accuracy: 81.21%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 6\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36710 | Acc: 81.25%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36549 | Acc: 82.19%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.37106 | Acc: 80.62%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38653 | Acc: 81.09%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.34657 | Acc: 82.81%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36520 | Acc: 81.09%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37901 | Acc: 80.00%\n",
      "\n",
      "Average Train Loss in Epoch 6: 0.3698\n",
      "\n",
      "Average Test Loss in Epoch 6: 0.3694 | Test Accuracy: 81.24%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 7\n",
      "Looked at: 0/14125634 samples. | Loss: 0.35230 | Acc: 82.50%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35273 | Acc: 83.28%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.34115 | Acc: 82.66%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36899 | Acc: 80.94%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.36564 | Acc: 81.72%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38132 | Acc: 81.72%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.33519 | Acc: 82.81%\n",
      "\n",
      "Average Train Loss in Epoch 7: 0.3695\n",
      "\n",
      "Average Test Loss in Epoch 7: 0.3691 | Test Accuracy: 81.26%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 8\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36512 | Acc: 82.81%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35878 | Acc: 81.41%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.38000 | Acc: 81.72%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38910 | Acc: 80.78%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38398 | Acc: 80.78%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39345 | Acc: 81.56%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.38457 | Acc: 80.94%\n",
      "\n",
      "Average Train Loss in Epoch 8: 0.3692\n",
      "\n",
      "Average Test Loss in Epoch 8: 0.3688 | Test Accuracy: 81.26%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 9\n",
      "Looked at: 0/14125634 samples. | Loss: 0.40517 | Acc: 78.28%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37230 | Acc: 80.31%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36637 | Acc: 81.25%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38242 | Acc: 80.62%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35182 | Acc: 82.81%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36982 | Acc: 80.94%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.39036 | Acc: 80.00%\n",
      "\n",
      "Average Train Loss in Epoch 9: 0.3690\n",
      "\n",
      "Average Test Loss in Epoch 9: 0.3686 | Test Accuracy: 81.27%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 10\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37071 | Acc: 80.47%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.34626 | Acc: 84.06%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.33773 | Acc: 83.28%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.37225 | Acc: 80.62%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35693 | Acc: 80.78%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.32610 | Acc: 83.91%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.38437 | Acc: 80.47%\n",
      "\n",
      "Average Train Loss in Epoch 10: 0.3688\n",
      "\n",
      "Average Test Loss in Epoch 10: 0.3685 | Test Accuracy: 81.28%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 11\n",
      "Looked at: 0/14125634 samples. | Loss: 0.39089 | Acc: 79.06%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.39490 | Acc: 79.53%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35543 | Acc: 79.69%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38064 | Acc: 81.09%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35201 | Acc: 82.50%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39681 | Acc: 79.53%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36624 | Acc: 82.66%\n",
      "\n",
      "Average Train Loss in Epoch 11: 0.3686\n",
      "\n",
      "Average Test Loss in Epoch 11: 0.3683 | Test Accuracy: 81.29%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 12\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37079 | Acc: 80.31%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36200 | Acc: 81.41%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35089 | Acc: 81.25%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38315 | Acc: 80.62%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38211 | Acc: 79.84%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39024 | Acc: 77.81%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36204 | Acc: 81.41%\n",
      "\n",
      "Average Train Loss in Epoch 12: 0.3685\n",
      "\n",
      "Average Test Loss in Epoch 12: 0.3681 | Test Accuracy: 81.30%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 13\n",
      "Looked at: 0/14125634 samples. | Loss: 0.39763 | Acc: 80.31%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37498 | Acc: 82.19%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.40018 | Acc: 78.12%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36906 | Acc: 81.09%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37657 | Acc: 79.53%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37201 | Acc: 81.72%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36368 | Acc: 81.25%\n",
      "\n",
      "Average Train Loss in Epoch 13: 0.3683\n",
      "\n",
      "Average Test Loss in Epoch 13: 0.3680 | Test Accuracy: 81.32%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 14\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36505 | Acc: 80.47%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35735 | Acc: 81.25%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35621 | Acc: 82.97%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.39176 | Acc: 81.41%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.36406 | Acc: 79.38%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38678 | Acc: 81.25%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.39517 | Acc: 77.97%\n",
      "\n",
      "Average Train Loss in Epoch 14: 0.3682\n",
      "\n",
      "Average Test Loss in Epoch 14: 0.3679 | Test Accuracy: 81.32%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 15\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37483 | Acc: 81.72%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36165 | Acc: 82.66%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36735 | Acc: 80.31%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35381 | Acc: 81.88%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35972 | Acc: 81.88%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36696 | Acc: 80.94%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37656 | Acc: 81.72%\n",
      "\n",
      "Average Train Loss in Epoch 15: 0.3681\n",
      "\n",
      "Average Test Loss in Epoch 15: 0.3678 | Test Accuracy: 81.32%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 16\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37292 | Acc: 80.62%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.34740 | Acc: 83.44%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.33617 | Acc: 85.00%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36453 | Acc: 82.03%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38579 | Acc: 79.69%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37658 | Acc: 81.72%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.33292 | Acc: 85.16%\n",
      "\n",
      "Average Train Loss in Epoch 16: 0.3680\n",
      "\n",
      "Average Test Loss in Epoch 16: 0.3677 | Test Accuracy: 81.33%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 17\n",
      "Looked at: 0/14125634 samples. | Loss: 0.34978 | Acc: 84.22%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35351 | Acc: 81.88%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36434 | Acc: 82.03%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35051 | Acc: 81.56%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.39221 | Acc: 79.38%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39841 | Acc: 77.03%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37523 | Acc: 79.69%\n",
      "\n",
      "Average Train Loss in Epoch 17: 0.3678\n",
      "\n",
      "Average Test Loss in Epoch 17: 0.3676 | Test Accuracy: 81.35%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 18\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37398 | Acc: 81.72%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.34867 | Acc: 82.97%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.37152 | Acc: 81.88%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36409 | Acc: 81.41%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.36035 | Acc: 81.72%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37739 | Acc: 80.16%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36793 | Acc: 80.62%\n",
      "\n",
      "Average Train Loss in Epoch 18: 0.3677\n",
      "\n",
      "Average Test Loss in Epoch 18: 0.3675 | Test Accuracy: 81.35%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 19\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36022 | Acc: 83.44%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35421 | Acc: 83.28%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.34827 | Acc: 82.50%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36121 | Acc: 81.25%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.32419 | Acc: 83.75%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.35754 | Acc: 79.84%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.38252 | Acc: 80.31%\n",
      "\n",
      "Average Train Loss in Epoch 19: 0.3676\n",
      "\n",
      "Average Test Loss in Epoch 19: 0.3674 | Test Accuracy: 81.36%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 20\n",
      "Looked at: 0/14125634 samples. | Loss: 0.34422 | Acc: 83.44%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35243 | Acc: 82.34%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35612 | Acc: 81.72%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38175 | Acc: 79.84%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35463 | Acc: 81.25%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37681 | Acc: 80.62%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37111 | Acc: 80.31%\n",
      "\n",
      "Average Train Loss in Epoch 20: 0.3675\n",
      "\n",
      "Average Test Loss in Epoch 20: 0.3673 | Test Accuracy: 81.37%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 21\n",
      "Looked at: 0/14125634 samples. | Loss: 0.35441 | Acc: 82.50%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.38522 | Acc: 80.00%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.39616 | Acc: 80.78%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36951 | Acc: 80.78%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.36890 | Acc: 81.09%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.41490 | Acc: 75.94%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.41379 | Acc: 76.09%\n",
      "\n",
      "Average Train Loss in Epoch 21: 0.3675\n",
      "\n",
      "Average Test Loss in Epoch 21: 0.3672 | Test Accuracy: 81.37%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 22\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37043 | Acc: 80.31%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36479 | Acc: 82.81%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35850 | Acc: 81.25%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36957 | Acc: 82.19%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37066 | Acc: 81.41%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37389 | Acc: 80.47%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.34716 | Acc: 82.81%\n",
      "\n",
      "Average Train Loss in Epoch 22: 0.3674\n",
      "\n",
      "Average Test Loss in Epoch 22: 0.3671 | Test Accuracy: 81.38%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 23\n",
      "Looked at: 0/14125634 samples. | Loss: 0.34697 | Acc: 82.66%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36754 | Acc: 79.22%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36347 | Acc: 82.81%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36795 | Acc: 81.56%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35920 | Acc: 82.34%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37139 | Acc: 79.06%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.34670 | Acc: 84.53%\n",
      "\n",
      "Average Train Loss in Epoch 23: 0.3673\n",
      "\n",
      "Average Test Loss in Epoch 23: 0.3671 | Test Accuracy: 81.37%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 24\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37204 | Acc: 82.34%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37105 | Acc: 81.72%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.34025 | Acc: 82.81%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.34512 | Acc: 82.03%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38700 | Acc: 81.56%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39688 | Acc: 78.28%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37953 | Acc: 81.72%\n",
      "\n",
      "Average Train Loss in Epoch 24: 0.3672\n",
      "\n",
      "Average Test Loss in Epoch 24: 0.3670 | Test Accuracy: 81.38%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 25\n",
      "Looked at: 0/14125634 samples. | Loss: 0.35158 | Acc: 82.81%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36911 | Acc: 80.78%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.37169 | Acc: 80.94%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.38531 | Acc: 79.84%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.33342 | Acc: 83.44%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36133 | Acc: 83.28%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37073 | Acc: 82.34%\n",
      "\n",
      "Average Train Loss in Epoch 25: 0.3671\n",
      "\n",
      "Average Test Loss in Epoch 25: 0.3669 | Test Accuracy: 81.39%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 26\n",
      "Looked at: 0/14125634 samples. | Loss: 0.38048 | Acc: 80.62%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35437 | Acc: 82.97%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.38018 | Acc: 82.66%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.33758 | Acc: 84.69%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37496 | Acc: 80.31%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38321 | Acc: 79.84%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.39056 | Acc: 78.75%\n",
      "\n",
      "Average Train Loss in Epoch 26: 0.3671\n",
      "\n",
      "Average Test Loss in Epoch 26: 0.3669 | Test Accuracy: 81.38%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 27\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36476 | Acc: 79.84%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.40334 | Acc: 80.78%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35593 | Acc: 81.56%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.37628 | Acc: 79.38%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38541 | Acc: 79.06%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36293 | Acc: 80.94%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37281 | Acc: 80.00%\n",
      "\n",
      "Average Train Loss in Epoch 27: 0.3670\n",
      "\n",
      "Average Test Loss in Epoch 27: 0.3667 | Test Accuracy: 81.40%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 28\n",
      "Looked at: 0/14125634 samples. | Loss: 0.33920 | Acc: 84.06%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.39577 | Acc: 78.59%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36553 | Acc: 81.09%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.33766 | Acc: 84.69%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37899 | Acc: 79.53%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37286 | Acc: 82.03%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.32662 | Acc: 83.75%\n",
      "\n",
      "Average Train Loss in Epoch 28: 0.3669\n",
      "\n",
      "Average Test Loss in Epoch 28: 0.3667 | Test Accuracy: 81.40%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 29\n",
      "Looked at: 0/14125634 samples. | Loss: 0.40149 | Acc: 80.00%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35815 | Acc: 82.34%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35634 | Acc: 81.25%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36286 | Acc: 80.16%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38114 | Acc: 79.53%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37161 | Acc: 80.47%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36749 | Acc: 82.97%\n",
      "\n",
      "Average Train Loss in Epoch 29: 0.3668\n",
      "\n",
      "Average Test Loss in Epoch 29: 0.3666 | Test Accuracy: 81.41%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 30\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36972 | Acc: 82.19%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.34223 | Acc: 82.03%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.37342 | Acc: 79.69%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.37640 | Acc: 80.62%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37765 | Acc: 79.38%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37371 | Acc: 82.34%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36719 | Acc: 80.78%\n",
      "\n",
      "Average Train Loss in Epoch 30: 0.3668\n",
      "\n",
      "Average Test Loss in Epoch 30: 0.3666 | Test Accuracy: 81.41%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 31\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36959 | Acc: 81.25%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37810 | Acc: 79.22%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35175 | Acc: 82.81%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35616 | Acc: 82.97%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37253 | Acc: 81.72%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38863 | Acc: 78.44%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36732 | Acc: 80.47%\n",
      "\n",
      "Average Train Loss in Epoch 31: 0.3667\n",
      "\n",
      "Average Test Loss in Epoch 31: 0.3664 | Test Accuracy: 81.42%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 32\n",
      "Looked at: 0/14125634 samples. | Loss: 0.38633 | Acc: 80.31%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37595 | Acc: 80.94%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36916 | Acc: 81.56%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35417 | Acc: 82.66%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.38338 | Acc: 79.38%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.34969 | Acc: 82.50%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37684 | Acc: 79.22%\n",
      "\n",
      "Average Train Loss in Epoch 32: 0.3666\n",
      "\n",
      "Average Test Loss in Epoch 32: 0.3664 | Test Accuracy: 81.42%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 33\n",
      "Looked at: 0/14125634 samples. | Loss: 0.33151 | Acc: 83.91%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35243 | Acc: 83.44%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.40070 | Acc: 80.31%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36696 | Acc: 80.47%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37117 | Acc: 80.94%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36802 | Acc: 81.72%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37105 | Acc: 82.03%\n",
      "\n",
      "Average Train Loss in Epoch 33: 0.3665\n",
      "\n",
      "Average Test Loss in Epoch 33: 0.3663 | Test Accuracy: 81.43%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 34\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36644 | Acc: 80.31%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37906 | Acc: 81.25%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.41937 | Acc: 77.50%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.33292 | Acc: 83.75%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35917 | Acc: 81.25%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39603 | Acc: 79.69%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.35040 | Acc: 83.12%\n",
      "\n",
      "Average Train Loss in Epoch 34: 0.3664\n",
      "\n",
      "Average Test Loss in Epoch 34: 0.3662 | Test Accuracy: 81.44%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 35\n",
      "Looked at: 0/14125634 samples. | Loss: 0.34261 | Acc: 83.28%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.38081 | Acc: 80.78%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35652 | Acc: 81.56%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.37765 | Acc: 81.88%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.37416 | Acc: 81.41%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.39667 | Acc: 78.59%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36175 | Acc: 82.34%\n",
      "\n",
      "Average Train Loss in Epoch 35: 0.3664\n",
      "\n",
      "Average Test Loss in Epoch 35: 0.3661 | Test Accuracy: 81.44%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 36\n",
      "Looked at: 0/14125634 samples. | Loss: 0.40982 | Acc: 78.75%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35975 | Acc: 80.78%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36340 | Acc: 81.56%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35415 | Acc: 82.50%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.34633 | Acc: 82.03%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37513 | Acc: 80.62%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37116 | Acc: 79.69%\n",
      "\n",
      "Average Train Loss in Epoch 36: 0.3663\n",
      "\n",
      "Average Test Loss in Epoch 36: 0.3660 | Test Accuracy: 81.45%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 37\n",
      "Looked at: 0/14125634 samples. | Loss: 0.35815 | Acc: 81.41%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.37062 | Acc: 81.56%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36992 | Acc: 80.78%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36826 | Acc: 80.31%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35365 | Acc: 82.97%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.38225 | Acc: 80.00%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36522 | Acc: 81.72%\n",
      "\n",
      "Average Train Loss in Epoch 37: 0.3662\n",
      "\n",
      "Average Test Loss in Epoch 37: 0.3660 | Test Accuracy: 81.46%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 38\n",
      "Looked at: 0/14125634 samples. | Loss: 0.37059 | Acc: 80.94%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.36485 | Acc: 81.56%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.32735 | Acc: 84.06%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.35543 | Acc: 82.19%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35705 | Acc: 81.88%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.37144 | Acc: 82.03%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.39804 | Acc: 79.69%\n",
      "\n",
      "Average Train Loss in Epoch 38: 0.3661\n",
      "\n",
      "Average Test Loss in Epoch 38: 0.3659 | Test Accuracy: 81.48%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 39\n",
      "Looked at: 0/14125634 samples. | Loss: 0.38041 | Acc: 79.38%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.35889 | Acc: 81.72%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.36664 | Acc: 82.81%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.36892 | Acc: 80.47%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.34949 | Acc: 81.56%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.36861 | Acc: 82.81%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.36306 | Acc: 81.41%\n",
      "\n",
      "Average Train Loss in Epoch 39: 0.3660\n",
      "\n",
      "Average Test Loss in Epoch 39: 0.3660 | Test Accuracy: 81.47%\n",
      "\n",
      "\n",
      "\n",
      "Epoch: 40\n",
      "Looked at: 0/14125634 samples. | Loss: 0.36633 | Acc: 80.78%\n",
      "Looked at: 2048000/14125634 samples. | Loss: 0.33380 | Acc: 83.12%\n",
      "Looked at: 4096000/14125634 samples. | Loss: 0.35927 | Acc: 81.25%\n",
      "Looked at: 6144000/14125634 samples. | Loss: 0.32863 | Acc: 83.12%\n",
      "Looked at: 8192000/14125634 samples. | Loss: 0.35964 | Acc: 82.03%\n",
      "Looked at: 10240000/14125634 samples. | Loss: 0.41060 | Acc: 79.69%\n",
      "Looked at: 12288000/14125634 samples. | Loss: 0.37140 | Acc: 80.31%\n",
      "\n",
      "Average Train Loss in Epoch 40: 0.3660\n",
      "\n",
      "Average Test Loss in Epoch 40: 0.3657 | Test Accuracy: 81.48%\n"
     ]
    }
   ],
   "source": [
    "epochs = 41\n",
    "# Building training and evaluation loop\n",
    "for epoch in range(epochs):\n",
    "\n",
    "    if epoch % 1 == 0:\n",
    "        print(f\"\\n\\n\\nEpoch: {epoch}\")\n",
    "    \n",
    "    ###TRAINING\n",
    "    model_1.train()\n",
    "    train_loss = 0\n",
    "\n",
    "    # Add a loop to loop through training batches\n",
    "    for batch, (X, y) in enumerate(train_loader):\n",
    "        X, y = X.to(device), y.to(device)\n",
    "    \n",
    "        model_1.train()\n",
    "    \n",
    "        # 1.forward pass\n",
    "        y_logits = model_1(X).squeeze()\n",
    "        y_pred = torch.round(torch.sigmoid(y_logits))\n",
    "    \n",
    "        # 2.Calculate the loss\n",
    "        loss = loss_fn(y_logits, y)\n",
    "        train_loss += loss  #accumalates training loss\n",
    "        acc = accuracy_fn(y_true=y,\n",
    "                          y_pred=y_pred)\n",
    "        \n",
    "        # 3.optimizer zero grad\n",
    "        optimizer.zero_grad()\n",
    "    \n",
    "        # 4.Loss Backward (backpropagation)\n",
    "        loss.backward()\n",
    "    \n",
    "        # 5.optimizer step step step(gradient descent)\n",
    "        optimizer.step()\n",
    "\n",
    "        if batch % 3200 == 0 and epoch % 1 == 0:\n",
    "            print(f'Looked at: {batch * 640}/{len(train_loader.dataset)} samples. | Loss: {loss:.5f} | Acc: {acc:.2f}%')\n",
    "\n",
    "    # Divide total train loss by length of train dataloader\n",
    "    train_loss /= len(train_loader)\n",
    "    if epoch % 1 == 0:\n",
    "        print(f\"\\nAverage Train Loss in Epoch {epoch}: {train_loss:.4f}\")\n",
    "\n",
    "    \n",
    "    ### EVALUATION\n",
    "    model_1.eval()  # Ensure model is in evaluation mode\n",
    "    test_loss = 0\n",
    "    test_acc = 0\n",
    "\n",
    "    with torch.inference_mode():  # No need to compute gradients\n",
    "        for X, y in test_loader:\n",
    "            X, y = X.to(device), y.to(device)\n",
    "\n",
    "            # Forward pass\n",
    "            y_logits = model_1(X).squeeze()\n",
    "            y_pred = torch.round(torch.sigmoid(y_logits))\n",
    "\n",
    "            # Calculate the loss\n",
    "            loss = loss_fn(y_logits, y)\n",
    "            test_loss += loss.item()  # Accumulate test loss\n",
    "            acc = accuracy_fn(y_true=y, y_pred=y_pred)\n",
    "            test_acc += acc\n",
    "\n",
    "    # Average test loss and accuracy\n",
    "    test_loss /= len(test_loader)\n",
    "    test_acc /= len(test_loader)\n",
    "    print(f\"\\nAverage Test Loss in Epoch {epoch}: {test_loss:.4f} | Test Accuracy: {test_acc:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e569435e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T20:10:05.943564Z",
     "iopub.status.busy": "2024-07-29T20:10:05.943213Z",
     "iopub.status.idle": "2024-07-29T20:10:06.335531Z",
     "shell.execute_reply": "2024-07-29T20:10:06.334593Z"
    },
    "papermill": {
     "duration": 0.439655,
     "end_time": "2024-07-29T20:10:06.338175",
     "exception": false,
     "start_time": "2024-07-29T20:10:05.898520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[-1.6868],\n",
      "        [ 0.4347],\n",
      "        [ 0.5080],\n",
      "        [-9.0323],\n",
      "        [-0.7732],\n",
      "        [-8.3236],\n",
      "        [-0.0770],\n",
      "        [-8.3077],\n",
      "        [-7.9781],\n",
      "        [-8.4047]], device='cuda:0')\n",
      "tensor([[1.5620e-01],\n",
      "        [6.0699e-01],\n",
      "        [6.2434e-01],\n",
      "        [1.1947e-04],\n",
      "        [3.1578e-01],\n",
      "        [2.4266e-04],\n",
      "        [4.8075e-01],\n",
      "        [2.4656e-04],\n",
      "        [3.4277e-04],\n",
      "        [2.2376e-04]], device='cuda:0')\n",
      "tensor([[-1.4977,  0.0426,  1.6876, -0.5989, -1.6731,  1.0214,  0.8261, -1.5387,\n",
      "         -1.1574,  1.5619, -0.1870, -0.9559],\n",
      "        [ 0.5005,  0.0426,  0.1151, -0.5989,  0.3772,  0.3770, -0.4948,  0.6499,\n",
      "          0.8640, -0.6402, -0.1870,  1.0462],\n",
      "        [ 0.5005,  0.0426,  1.3566, -0.5989, -1.6731, -1.3771,  1.3671,  0.6499,\n",
      "          0.8640, -0.6402, -0.1870,  1.0462],\n",
      "        [-1.3496,  0.0426,  1.6876,  1.6698, -0.3864,  0.8782, -0.5954, -1.5387,\n",
      "         -1.1574,  1.5619, -0.1870, -0.9559],\n",
      "        [ 0.7965,  0.0426, -0.6298, -0.5989,  0.1791,  0.3770, -0.1803, -1.5387,\n",
      "          0.8640, -0.6402, -0.1870,  1.0462],\n",
      "        [-1.3496,  0.0426,  0.2806,  1.6698, -0.3151,  0.8782,  1.0400, -1.5387,\n",
      "         -1.1574,  1.5619, -0.1870,  1.0462],\n",
      "        [-1.2756,  0.0426, -0.5470, -0.5989, -1.6731,  0.8782, -1.9038,  0.6499,\n",
      "         -1.1574,  1.5619, -0.1870, -0.9559],\n",
      "        [-1.4236,  0.0426,  0.8600,  1.6698, -1.6731,  1.0214,  0.1091,  0.6499,\n",
      "         -1.1574,  1.5619, -0.1870, -0.9559],\n",
      "        [ 2.3506,  0.0426,  1.3566,  1.6698,  0.4367,  0.3770, -0.8219, -1.5387,\n",
      "          0.8640, -0.6402, -0.1870,  1.0462],\n",
      "        [-0.5356,  0.0426,  0.1151,  1.6698,  0.9334,  0.8782, -1.1364, -1.5387,\n",
      "         -1.1574,  1.5619, -0.1870,  1.0462]])\n"
     ]
    }
   ],
   "source": [
    "# Make prediction\n",
    "model_1.eval()\n",
    "with torch.inference_mode():\n",
    "    y_logits = model_1(X_for_preds_tensor.to(device))\n",
    "    \n",
    "print(y_logits[:10])\n",
    "y_pred_probs = torch.sigmoid(y_logits)\n",
    "print(y_pred_probs[:10])\n",
    "print(X_for_preds_tensor[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23e8bd50",
   "metadata": {
    "papermill": {
     "duration": 0.042823,
     "end_time": "2024-07-29T20:10:06.424285",
     "exception": false,
     "start_time": "2024-07-29T20:10:06.381462",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# # SETTING PRECISION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "68cf1c7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T20:10:06.511460Z",
     "iopub.status.busy": "2024-07-29T20:10:06.511094Z",
     "iopub.status.idle": "2024-07-29T20:10:06.559344Z",
     "shell.execute_reply": "2024-07-29T20:10:06.558319Z"
    },
    "papermill": {
     "duration": 0.094379,
     "end_time": "2024-07-29T20:10:06.561740",
     "exception": false,
     "start_time": "2024-07-29T20:10:06.467361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.set_printoptions(precision=10, suppress=False)\n",
    "y_pred_probs_numpy = y_pred_probs.cpu().numpy().astype(np.float64)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "993537c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T20:10:06.650040Z",
     "iopub.status.busy": "2024-07-29T20:10:06.649722Z",
     "iopub.status.idle": "2024-07-29T20:10:06.675452Z",
     "shell.execute_reply": "2024-07-29T20:10:06.674560Z"
    },
    "papermill": {
     "duration": 0.071766,
     "end_time": "2024-07-29T20:10:06.677470",
     "exception": false,
     "start_time": "2024-07-29T20:10:06.605704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_probs_flat = y_pred_probs_numpy.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5982e548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T20:10:06.764467Z",
     "iopub.status.busy": "2024-07-29T20:10:06.764156Z",
     "iopub.status.idle": "2024-07-29T20:10:33.741644Z",
     "shell.execute_reply": "2024-07-29T20:10:33.740499Z"
    },
    "papermill": {
     "duration": 27.023846,
     "end_time": "2024-07-29T20:10:33.744303",
     "exception": false,
     "start_time": "2024-07-29T20:10:06.720457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Create the submission DataFrame\n",
    "submission_df = pd.DataFrame({'id': df_test['id'], 'Response': y_pred_probs_flat})\n",
    "\n",
    "# Save to CSV\n",
    "submission_df.to_csv('submission.csv', index=False, float_format='%.6f')\n",
    "print('Saved successfully!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b5c8b0d",
   "metadata": {
    "papermill": {
     "duration": 0.042863,
     "end_time": "2024-07-29T20:10:33.831294",
     "exception": false,
     "start_time": "2024-07-29T20:10:33.788431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 8930475,
     "sourceId": 73291,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5937.643379,
   "end_time": "2024-07-29T20:10:36.706271",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-29T18:31:39.062892",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
